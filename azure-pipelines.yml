trigger:
  branches:
    include:
      - main
      - develop

variables:
  buildConfiguration: 'Release'

stages:

# -------------------
# CI - Build Stage
# -------------------
- stage: Build
  displayName: 'Build & Test (.NET 8)'
  jobs:
    - job: Build
      displayName: 'Build Job'
      pool:
        vmImage: 'windows-latest'
      steps:
        - task: UseDotNet@2
          displayName: 'Install .NET 8 SDK'
          inputs:
            packageType: 'sdk'
            version: '8.0.x'
            includePreviewVersions: true

        - task: DotNetCoreCLI@2
          displayName: 'Restore NuGet packages'
          inputs:
            command: 'restore'
            projects: '**/*.csproj'

        - task: DotNetCoreCLI@2
          displayName: 'Build Solution'
          inputs:
            command: 'build'
            projects: '**/*.csproj'
            arguments: '--configuration $(buildConfiguration)'

        - task: DotNetCoreCLI@2
          displayName: 'Run Unit Tests'
          inputs:
            command: 'test'
            projects: '../HospitalQueueSystem_Azure/HospitalQueueSystem_Test.csproj'  # Update this if your test project name differs
            arguments: '--configuration $(buildConfiguration) --no-build --logger trx'

        - task: PublishTestResults@2
          displayName: 'Publish Test Results'
          inputs:
            testResultsFormat: 'VSTest'
            testResultsFiles: '**/TestResults/*.trx'
            failTaskOnFailedTests: true

        - task: DotNetCoreCLI@2
          displayName: 'Publish Artifacts'
          inputs:
            command: 'publish'
            publishWebProjects: true
            arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
            zipAfterPublish: true

        - task: PublishBuildArtifacts@1
          displayName: 'Publish Artifact to Pipeline'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'drop'
            publishLocation: 'Container'

# -------------------
# CD - Dev Deployment
# -------------------
- stage: Deploy_Dev
  displayName: 'Deploy to Dev'
  dependsOn: Build
  jobs:
    - deployment: DeployDev
      displayName: 'Deploy Dev Environment'
      environment: 'Development'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: drop

              - task: AzureWebApp@1
                displayName: 'Deploy to Azure Web App (Dev)'
                inputs:
                  azureSubscription: 'RamsanAzureServiceCon'
                  appType: 'webApp'
                  appName: 'HospitalQueueSystem-Dev'
                  package: '$(Pipeline.Workspace)/drop/**/*.zip'

# -------------------
# CD - QA Deployment
# -------------------
- stage: Deploy_QA
  displayName: 'Deploy to QA'
  dependsOn: Deploy_Dev
  condition: succeeded()
  jobs:
    - deployment: DeployQA
      displayName: 'Deploy QA Environment'
      environment: 'Staging'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: drop

              - task: AzureWebApp@1
                displayName: 'Deploy to Azure Web App (QA)'
                inputs:
                  azureSubscription: 'RamsanAzureServiceCon'
                  appType: 'webApp'
                  appName: 'HospitalQueueSystem-QA'
                  package: '$(Pipeline.Workspace)/drop/**/*.zip'

# -------------------
# CD - Prod Deployment (with Rollback Logic)
# -------------------
- stage: Deploy_Prod
  displayName: 'Deploy to Prod'
  dependsOn: Deploy_QA
  condition: succeeded()
  jobs:
    - deployment: DeployProd
      displayName: 'Deploy Prod Environment'
      environment: 'Production'
      strategy:
        runOnce:
          deploy:
            steps:
              - download: current
                artifact: drop

              # Main Deployment
              - task: AzureWebApp@1
                displayName: 'Deploy to Azure Web App (Prod)'
                inputs:
                  azureSubscription: 'RamsanAzureServiceCon'
                  appType: 'webApp'
                  appName: 'HospitalQueueSystem'
                  package: '$(Pipeline.Workspace)/drop/**/*.zip'

              # Save this good artifact for rollback
              - task: CopyFiles@2
                displayName: 'Cache Artifact for Rollback'
                condition: succeeded()
                inputs:
                  SourceFolder: '$(Pipeline.Workspace)/drop'
                  Contents: '**/*.zip'
                  TargetFolder: '$(Pipeline.Workspace)/rollback'

              # 🔁 Rollback Step
              - task: AzureCLI@2
                displayName: 'Rollback Deployment (Previous Stable Build)'
                condition: failed()
                inputs:
                  azureSubscription: 'RamsanAzureServiceCon'
                  scriptType: 'ps'
                  scriptLocation: 'inlineScript'
                  inlineScript: |
                    Write-Host "Deployment failed. Initiating rollback..."

                    $zipPath = "$(Pipeline.Workspace)/rollback/**/*.zip"

                    az webapp deployment source config-zip `
                      --resource-group "Your-Resource-Group-Name" `
                      --name "HospitalQueueSystem" `
                      --src $zipPath
